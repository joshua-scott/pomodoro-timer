{"version":3,"sources":["app.js"],"names":["buttons","document","querySelectorAll","isBreak","countdown","times","break","querySelector","work","mainDisplay","main","mode","setTime","e","preventDefault","change","which","dataset","newTime","parseInt","textContent","timer","seconds","clearInterval","startTime","Date","now","endTime","displayTimeLeft","setInterval","secondsLeft","Math","round","classList","toggle","secs","hours","floor","mins","display","toTwoDigits","title","num","forEach","btn","addEventListener","innerHTML"],"mappings":";;AAAA,MAAMA,UAAUC,SAASC,gBAAT,CAA0B,eAA1B,CAAhB;AACA,IAAIC,UAAU,KAAd;AACA,IAAIC,SAAJ;;AAEA,MAAMC,QAAQ;AACZC,SAAOL,SAASM,aAAT,CAAuB,cAAvB,CADK;AAEZC,QAAMP,SAASM,aAAT,CAAuB,aAAvB;AAFM,CAAd;;AAKA,MAAME,cAAc;AAClBC,QAAMT,SAASM,aAAT,CAAuB,QAAvB,CADY;AAElBI,QAAMV,SAASM,aAAT,CAAuB,cAAvB,CAFY;AAGlBH,aAAWH,SAASM,aAAT,CAAuB,mBAAvB;AAHO,CAApB;;AAMA,SAASK,OAAT,CAAiBC,CAAjB,EAAoB;AAClBA,IAAEC,cAAF;AACA,QAAM,EAAEC,MAAF,EAAUC,KAAV,KAAoB,KAAKC,OAA/B;AACA,MAAIC,UAAUC,SAASd,MAAMW,KAAN,EAAaI,WAAtB,IAAqCD,SAASJ,MAAT,CAAnD;AACA,MAAIG,UAAU,CAAd,EAAiBA,UAAU,CAAV;AACjBb,QAAMW,KAAN,EAAaI,WAAb,GAA2BF,OAA3B;AACD;;AAED,SAASG,KAAT,CAAeC,OAAf,EAAwB;AACtBC,gBAAcnB,SAAd,EADsB,CACI;AAC1B,QAAMoB,YAAYC,KAAKC,GAAL,EAAlB;AACA,QAAMC,UAAUH,YAAYF,UAAU,IAAtC;AACAb,cAAYE,IAAZ,CAAiBS,WAAjB,GAA+BjB,UAAU,OAAV,GAAoB,MAAnD;AACAyB,kBAAgBN,OAAhB,EALsB,CAKI;;AAE1B;AACAlB,cAAYyB,YAAY,MAAM;AAC5B,UAAMC,cAAcC,KAAKC,KAAL,CAAW,CAACL,UAAUF,KAAKC,GAAL,EAAX,IAAyB,IAApC,CAApB;AACA,QAAII,cAAc,CAAlB,EAAqB;AACnB3B,gBAAU,CAACA,OAAX;AACA,YAAMe,UAAUf,UAAUE,MAAMC,KAAN,CAAYc,WAAZ,GAA0B,EAApC,GAAyCf,MAAMG,IAAN,CAAWY,WAAX,GAAyB,EAAlF;AACAX,kBAAYC,IAAZ,CAAiBuB,SAAjB,CAA2BC,MAA3B,CAAkC,WAAlC;AACAb,YAAMH,OAAN;AACD,KALD,MAKO;AACLU,sBAAgBE,WAAhB;AACD;AACF,GAVW,EAUT,IAVS,CAAZ;AAWD;;AAED,SAASF,eAAT,CAAyBO,IAAzB,EAA+B;AAC7B;AACA,QAAMC,QAAQL,KAAKM,KAAL,CAAWF,OAAO,IAAlB,CAAd;AACAA,SAAOA,OAAO,IAAd;AACA,QAAMG,OAAOP,KAAKM,KAAL,CAAWF,OAAO,EAAlB,CAAb;AACAA,SAAOA,OAAO,EAAd;;AAEA,MAAII,UAAU,EAAd;;AAEA,MAAIH,QAAQ,CAAZ,EAAe;AACbG,cAAW,GAAEH,KAAM,IAAGI,YAAYF,IAAZ,CAAkB,IAAGE,YAAYL,IAAZ,CAAkB,EAA7D;AACD,GAFD,MAEO;AACLI,cAAW,GAAED,IAAK,IAAGE,YAAYL,IAAZ,CAAkB,EAAvC;AACD;;AAED1B,cAAYL,SAAZ,CAAsBgB,WAAtB,GAAoCmB,OAApC;AACAtC,WAASwC,KAAT,GAAiBF,OAAjB;AACD;;AAED,SAASC,WAAT,CAAqBE,GAArB,EAA0B;AACxB,SAAQ,GAAEA,MAAM,EAAN,GAAW,GAAX,GAAiB,EAAG,GAAEA,GAAI,EAApC;AACD;;AAED1C,QAAQ2C,OAAR,CAAgBC,OAAOA,IAAIC,gBAAJ,CAAqB,OAArB,EAA8BjC,OAA9B,CAAvB;AACAH,YAAYC,IAAZ,CAAiBmC,gBAAjB,CAAkC,OAAlC,EAA2C,MAAM;AAC/CxB,QAAMhB,MAAMG,IAAN,CAAWsC,SAAX,GAAuB,EAA7B;AACD,CAFD","file":"app.js","sourcesContent":["const buttons = document.querySelectorAll('[data-change]');\r\nlet isBreak = false;\r\nlet countdown;\r\n\r\nconst times = {\r\n  break: document.querySelector('.break .time'),\r\n  work: document.querySelector('.work .time')\r\n};\r\n\r\nconst mainDisplay = {\r\n  main: document.querySelector('.timer'),\r\n  mode: document.querySelector('.timer .mode'),\r\n  countdown: document.querySelector('.timer .countdown')\r\n};\r\n\r\nfunction setTime(e) {\r\n  e.preventDefault();\r\n  const { change, which } = this.dataset;\r\n  let newTime = parseInt(times[which].textContent) + parseInt(change);\r\n  if (newTime < 0) newTime = 0;\r\n  times[which].textContent = newTime;\r\n}\r\n\r\nfunction timer(seconds) {\r\n  clearInterval(countdown); // Clear any existing timers\r\n  const startTime = Date.now();\r\n  const endTime = startTime + seconds * 1000;\r\n  mainDisplay.mode.textContent = isBreak ? 'Break' : 'Work';  \r\n  displayTimeLeft(seconds); // We call this now to avoid having to wait a second for setInterval\r\n\r\n  // Every second, either switch mode or show the time left\r\n  countdown = setInterval(() => {\r\n    const secondsLeft = Math.round((endTime - Date.now()) / 1000);\r\n    if (secondsLeft < 0) {\r\n      isBreak = !isBreak;\r\n      const newTime = isBreak ? times.break.textContent * 60 : times.work.textContent * 60;\r\n      mainDisplay.main.classList.toggle('breaktime');\r\n      timer(newTime);\r\n    } else {\r\n      displayTimeLeft(secondsLeft);\r\n    }\r\n  }, 1000);\r\n}\r\n\r\nfunction displayTimeLeft(secs) {\r\n  // convert secs into hours/mins/secs\r\n  const hours = Math.floor(secs / 3600);\r\n  secs = secs % 3600;\r\n  const mins = Math.floor(secs / 60);\r\n  secs = secs % 60;\r\n\r\n  let display = '';\r\n  \r\n  if (hours > 0) {\r\n    display = `${hours}:${toTwoDigits(mins)}:${toTwoDigits(secs)}`;\r\n  } else {\r\n    display = `${mins}:${toTwoDigits(secs)}`;\r\n  }\r\n\r\n  mainDisplay.countdown.textContent = display;\r\n  document.title = display;\r\n}\r\n\r\nfunction toTwoDigits(num) {\r\n  return `${num < 10 ? '0' : ''}${num}`;\r\n}\r\n\r\nbuttons.forEach(btn => btn.addEventListener('click', setTime));\r\nmainDisplay.main.addEventListener('click', () => {\r\n  timer(times.work.innerHTML * 60);\r\n});"]}